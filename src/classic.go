package src

import (
	"github.com/ashkan90/auto/utils"
	"log"
	"sync"
)

type PortId string

type Socket struct {
	Name string
}

func NewSocket(name string) Socket {
	return Socket{
		Name: name,
	}
}

type PortInterface interface {
	GetId() string
}

type Port[S Socket] struct {
	Id                  PortId
	Label               string
	Index               int
	MultipleConnections bool
	Socket              S
}

func (p *Port[S]) GetId() string {
	return string(p.Id)
}

func NewPort[S Socket](socket S, label string, multipleConnections bool) *Port[S] {
	return &Port[S]{
		Id:                  PortId(GetUID()),
		Label:               label,
		MultipleConnections: multipleConnections,
		Socket:              socket,
	}
}

type Input[S Socket] struct {
	// Port instance
	Port PortInterface
	// Control instance
	Control ControlInterface
	// ShowControl Whether the control is visible. Can be managed dynamically by extensions. Default is `true`
	ShowControl bool
	// Label input label
	Label string
}

type InputInterface interface {
	GetId() string
}

func (i *Input[S]) GetId() string {
	return i.Port.GetId()
}

func NewInput[S Socket](socket S, label string, multipleConnections bool) *Input[S] {
	return &Input[S]{
		Port:        NewPort[S](socket, label, multipleConnections),
		Control:     NewControl(),
		Label:       label,
		ShowControl: true,
	}
}

func (i *Input[S]) AddControl(control *Control) {
	if i.Control != nil {
		log.Panic("control already added")
	}
	i.Control = control
}

func (i *Input[S]) RemoveControl() {
	i.Control = nil
}

type Output[S Socket] struct {
	// Port instance
	Port PortInterface
	// Control instance
	Control ControlInterface
	// ShowControl Whether the control is visible. Can be managed dynamically by extensions. Default is `true`
	ShowControl bool
	// Label input label
	Label string
}

func (o *Output[S]) GetId() string {
	return o.Port.GetId()
}

func NewOutput[S Socket](socket S, label string, multipleConnections bool) PortInterface {
	return &Output[S]{
		Port:        NewPort[S](socket, label, multipleConnections),
		Control:     NewControl(),
		Label:       label,
		ShowControl: true,
	}
}

type ControlInterface interface {
	GetId() string
	GetValue() any
}

type Control struct {
	// Control Id unique string generated by `getUID` function
	Id string
	// Control Index used for sorting controls. Default is `0`
	Index int
}

func NewControl() ControlInterface {
	return &Control{
		Id: GetUID(),
	}
}

func (c *Control) GetId() string {
	return c.Id
}

func (c *Control) GetValue() any {
	return nil
}

type InputControlOptions struct {
	Readonly *bool
	Initial  any
	Change   func(value any)
}

type InputControlType string

const (
	InputControlText   InputControlType = "text"
	InputControlNumber InputControlType = "number"
)

type InputControl struct {
	Control  ControlInterface
	Type     InputControlType
	Options  *InputControlOptions
	Readonly *bool
	Value    any
}

func NewInputControl(_type InputControlType, opt *InputControlOptions) *InputControl {
	return &InputControl{
		Control:  NewControl(),
		Type:     _type,
		Options:  opt,
		Value:    opt.Initial,
		Readonly: opt.Readonly,
	}
}

func (ic *InputControl) GetId() string {
	return ic.Control.GetId()
}

func (ic *InputControl) GetValue() any {
	return ic.Value
}

func (ic *InputControl) SetValue(value any) {
	ic.Value = &value
	if ic.Options.Change != nil {
		ic.Options.Change(value)
	}
}

type Node[Base NodeBase] struct {
	E        Base
	Inputs   *utils.SyncMap
	Outputs  *utils.SyncMap
	Controls *utils.SyncMap
	Selected *bool
	mu       *sync.Mutex
}

type NodeInterface interface {
	NodeExecutor
	NodeData
	Node() *Node[NodeBase]

	HasInput(k string) bool
	AddInput(k string, input InputInterface)
	RemoveInput(k string)

	HasOutput(k string) bool
	AddOutput(k string, output PortInterface)
	RemoveOutput(k string)

	HasControl(k string) bool
	AddControl(k string, control ControlInterface)
	RemoveControl(k string)
}

func (n *Node[Base]) HasInput(k string) bool {
	_, ok := n.Inputs.Get(k)
	return ok
}

func (n *Node[Base]) AddInput(k string, input InputInterface) {
	n.Inputs.Add(k, input)
}

func (n *Node[Base]) RemoveInput(k string) {
	n.Inputs.Delete(k)
}

func (n *Node[Base]) HasOutput(k string) bool {
	_, ok := n.Outputs.Get(k)
	return ok
}

func (n *Node[Base]) AddOutput(k string, output PortInterface) {
	n.Outputs.Add(k, output)
}

func (n *Node[Base]) RemoveOutput(k string) {
	n.Outputs.Delete(k)
}

func (n *Node[Base]) HasControl(k string) bool {
	_, ok := n.Controls.Get(k)
	return ok
}

func (n *Node[Base]) AddControl(k string, control ControlInterface) {
	n.Controls.Add(k, control)
}

func (n *Node[Base]) RemoveControl(k string) {
	n.Controls.Delete(k)
}

func (n *Node[Base]) Node() *Node[Base] {
	return n
}

func NewNode() *Node[NodeBase] {
	return &Node[NodeBase]{
		E:        NodeBase{ID: NodeId(GetUID())},
		Inputs:   utils.NewSyncMap(),
		Outputs:  utils.NewSyncMap(),
		Controls: utils.NewSyncMap(),
		mu:       &sync.Mutex{},
	}
}

func (n *Node[NodeBase]) Execute(input string, forward func(output string)) {
	forward("exec")
}

func (n *Node[NodeBase]) Data(inputs func() map[string]any) map[string]any {
	return inputs()
}

type Connection[Base ConnectionBase] struct {
	E            Base
	Source       NodeId
	SourceOutput NodeId
	Target       NodeId
	TargetInput  NodeId
}

func NewConnection(source NodeInterface, sourceOutput NodeId, target NodeInterface, targetInput NodeId) *Connection[ConnectionBase] {
	var sourceNode, targetNode = source.Node(), target.Node()
	if _, ok := sourceNode.Outputs.Get(string(sourceOutput)); !ok {
		log.Panicf("source node doesn't have output with key %s", sourceOutput)
	}
	if _, ok := targetNode.Inputs.Get(string(targetInput)); !ok {
		log.Panicf("target node doesn't have output with key %s", targetInput)
	}

	return &Connection[ConnectionBase]{
		E:            ConnectionBase{ID: ConnectionId(GetUID())},
		Source:       sourceNode.E.ID,
		SourceOutput: sourceOutput,
		Target:       targetNode.E.ID,
		TargetInput:  targetInput,
	}
}
